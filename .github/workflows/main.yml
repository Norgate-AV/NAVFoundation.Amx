name: CI

on:
  push:
    branches: [master]

  pull_request:
    branches: [master]

  workflow_dispatch:

defaults:
  run:
    shell: pwsh

jobs:
  setup:
    name: Setup

    runs-on: ["self-hosted", "windows", "server"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Show Environment
        run: |
          $PSVersionTable
          $pwd
          Write-Host Path:
          $env:PATH
          Write-Host
          Write-Host whoami:
          whoami
          Write-Host
          Write-Host Default Environment Variables:
          Write-Host "CI: $env:CI"
          Write-Host "GITHUB_ACTION: $env:GITHUB_ACTION"
          Write-Host "GITHUB_ACTION_PATH: $env:GITHUB_ACTION_PATH"
          Write-Host "GITHUB_ACTION_REPOSITORY: $env:GITHUB_ACTION_REPOSITORY"
          Write-Host "GITHUB_ACTIONS: $env:GITHUB_ACTIONS"
          Write-Host "GITHUB_ACTOR: $env:GITHUB_ACTOR"
          Write-Host "GITHUB_ACTOR_ID: $env:GITHUB_ACTOR_ID"
          Write-Host "GITHUB_API_URL: $env:GITHUB_API_URL"
          Write-Host "GITHUB_BASE_REF: $env:GITHUB_BASE_REF"
          Write-Host "GITHUB_ENV: $env:GITHUB_ENV"
          Write-Host "GITHUB_EVENT_NAME: $env:GITHUB_EVENT_NAME"
          Write-Host "GITHUB_EVENT_PATH: $env:GITHUB_EVENT_PATH"
          Write-Host "GITHUB_GRAPHQL_URL: $env:GITHUB_GRAPHQL_URL"
          Write-Host "GITHUB_HEAD_REF: $env:GITHUB_HEAD_REF"
          Write-Host "GITHUB_JOB: $env:GITHUB_JOB"
          Write-Host "GITHUB_PATH: $env:GITHUB_PATH"
          Write-Host "GITHUB_REF: $env:GITHUB_REF"
          Write-Host "GITHUB_REF_NAME: $env:GITHUB_REF_NAME"
          Write-Host "GITHUB_REF_PROTECTED: $env:GITHUB_REF_PROTECTED"
          Write-Host "GITHUB_REF_TYPE: $env:GITHUB_REF_TYPE"
          Write-Host "GITHUB_REPOSITORY: $env:GITHUB_REPOSITORY"
          Write-Host "GITHUB_REPOSITORY_ID: $env:GITHUB_REPOSITORY_ID"
          Write-Host "GITHUB_REPOSITORY_OWNER: $env:GITHUB_REPOSITORY_OWNER"
          Write-Host "GITHUB_REPOSITORY_OWNER_ID: $env:GITHUB_REPOSITORY_OWNER_ID"
          Write-Host "GITHUB_RETENTION_DAYS: $env:GITHUB_RETENTION_DAYS"
          Write-Host "GITHUB_RUN_ATTEMPT: $env:GITHUB_RUN_ATTEMPT"
          Write-Host "GITHUB_RUN_ID: $env:GITHUB_RUN_ID"
          Write-Host "GITHUB_RUN_NUMBER: $env:GITHUB_RUN_NUMBER"
          Write-Host "GITHUB_SERVER_URL: $env:GITHUB_SERVER_URL"
          Write-Host "GITHUB_SHA: $env:GITHUB_SHA"
          Write-Host "GITHUB_STEP_SUMMARY: $env:GITHUB_STEP_SUMMARY"
          Write-Host "GITHUB_WORKFLOW: $env:GITHUB_WORKFLOW"
          Write-Host "GITHUB_WORKFLOW_REF: $env:GITHUB_WORKFLOW_REF"
          Write-Host "GITHUB_WORKFLOW_SHA: $env:GITHUB_WORKFLOW_SHA"
          Write-Host "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          Write-Host "RUNNER_ARCH: $env:RUNNER_ARCH"
          Write-Host "RUNNER_DEBUG: $env:RUNNER_DEBUG"
          Write-Host "RUNNER_NAME: $env:RUNNER_NAME"
          Write-Host "RUNNER_OS: $env:RUNNER_OS"
          Write-Host "RUNNER_TEMP: $env:RUNNER_TEMP"
          Write-Host "RUNNER_TOOL_CACHE: $env:RUNNER_TOOL_CACHE"

      - name: Check genlinx
        run: which genlinx

  build:
    name: Build

    runs-on: ["self-hosted", "windows", "server"]

    needs: [setup]

    steps:
      - name: Run Build
        run: ./build.ps1

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            ./**/*.tkn
            ./**/*.tko
            ./*.build.log

  release:
    name: Release

    runs-on: ["self-hosted", "windows", "server"]

    needs: [build]

    if: github.ref == 'refs/heads/master'

    steps:
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: "5.x"

      - name: Show GitVersion config
        uses: gittools/actions/gitversion/execute@v0
        with:
          additionalArguments: /showConfig

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0

      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

      - name: Create Tag
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "${{ steps.gitversion.outputs.semVer }}"
